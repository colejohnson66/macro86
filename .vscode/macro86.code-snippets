{
  // Place your macro86 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Generate stub nMigen file": {
    "scope": "python",
    "prefix": "file",
    "body": [
      "\"\"\"",
      "<DESCRIPTION>",
      "<DATASHEET>",
      "(`/datasheets/DATASHEET.pdf`)",
      "\"\"\"",
      "",
      "# pylint error is for snake_case, but also covers short names",
      "# pylint: disable=C0103",
      "",
      "from typing import List, Tuple",
      "from nmigen import Array, ClockDomain, Elaboratable, Module, Mux, Signal",
      "from nmigen.build import Platform",
      "from nmigen.sim import Simulator, Delay",
      "from nmigen.asserts import Assert, Assume, Cover, Fell, Past, Rose, Stable",
      "from util import main",
      "",
      "",
      "class $1(Elaboratable):",
      "    \"\"\"",
      "    <DESCRIPTION>",
      "    <DATASHEET>",
      "",
      "    Attributes:",
      "        TODO",
      "    \"\"\"",
      "    # <ATTRIBUTES>",
      "",
      "    def __init__(self):",
      "        \"\"\"",
      "        Constructs a `$1`",
      "",
      "        Arguments:",
      "            TODO",
      "        \"\"\"",
      "",
      "    def elaborate(self, _: Platform) -> Module:",
      "        m = Module()",
      "",
      "        # TODO",
      "",
      "        return m",
      "",
      "    def ports(self):",
      "        \"\"\"Gets the ports for a `$1`\"\"\"",
      "        return [",
      "        ]",
      "",
      "    @classmethod",
      "    def sim(cls):",
      "        \"\"\"Simulate a <DESCRIPTION>\"\"\"",
      "        m = Module()",
      "        m.submodules.$2 = $2 = $1()",
      "",
      "        sim = Simulator(m)",
      "",
      "        def process():",
      "            yield",
      "",
      "        sim.add_process(process)",
      "        with sim.write_vcd(\"$3.vcd\", \"$3.gtkw\", traces=$2.ports()):",
      "            sim.run()",
      "",
      "    @classmethod",
      "    def formal(cls) -> Tuple[Module, List[Signal]]:",
      "        assert False",
      "",
      "",
      "if __name__ == \"__main__\":",
      "    main($1, \"$3.il\")",
    ],
    "description": "Generates a stub nMigen file/module"
  },
  "Delay method call": {
    "scope": "python",
    "prefix": "delay",
    "body": [
      "yield Delay($1)",
      "$0",
    ],
    "description": "Generates a `Delay` method call"
  }
}
