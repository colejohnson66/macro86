{
  "Generate stub nMigen file": {
    "scope": "python",
    "prefix": "file",
    "body": [
      // $1: The class name
      // $2: The variable name used when simulating
      "\"\"\"",
      "<DESCRIPTION>",
      "<DATASHEET>",
      "(`/datasheets/DATASHEET.pdf`)",
      "\"\"\"",
      "",
      "# pylint error is for snake_case, but also covers short names",
      "# pylint: disable=C0103",
      "",
      "from typing import List, Tuple",
      "from nmigen import Array, ClockDomain, Elaboratable, Module, Mux, Signal",
      "from nmigen.build import Platform",
      "from nmigen.sim import Simulator, Delay",
      "from nmigen.asserts import Assert, Assume, Cover, Fell, Past, Rose, Stable",
      "from util import main",
      "",
      "",
      "class $1(Elaboratable):",
      "    \"\"\"",
      "    <DESCRIPTION>",
      "    <DATASHEET>",
      "",
      "    Attributes:",
      "        TODO",
      "    \"\"\"",
      "    # <ATTRIBUTES>",
      "",
      "    def __init__(self):",
      "        \"\"\"",
      "        Constructs a `$1`",
      "",
      "        Arguments:",
      "            TODO",
      "        \"\"\"",
      "",
      "    def elaborate(self, _: Platform) -> Module:",
      "        m = Module()",
      "",
      "        # TODO",
      "",
      "        return m",
      "",
      "    def ports(self):",
      "        \"\"\"Gets the ports for a `$1`\"\"\"",
      "        return [",
      "        ]",
      "",
      "    @classmethod",
      "    def sim(cls):",
      "        \"\"\"Simulate a <DESCRIPTION>\"\"\"",
      "        m = Module()",
      "        m.submodules.$2 = $2 = $1()",
      "",
      "        sim = Simulator(m)",
      "",
      "        def process():",
      "            yield",
      "",
      "        sim.add_process(process)",
      "        with sim.write_vcd(\"out/$1.vcd\", \"out/$1.gtkw\", traces=$2.ports()):",
      "            sim.run()",
      "",
      "    @classmethod",
      "    def formal(cls) -> Tuple[Module, List[Signal]]:",
      "        assert False",
      "",
      "",
      "if __name__ == \"__main__\":",
      "    main($1, \"out/$1.il\")",
    ],
    "description": "Generates a stub nMigen file/module"
  },
  "Generate stub SBY file": {
    "prefix": "sby",
    "body": [
      // Why are 3 backslashes (6 when escaped) needed to output a single one?
      "[tasks]",
      "cover",
      "bmc",
      "",
      "[options]",
      "bmc: mode bmc",
      "cover: mode cover",
      "depth 10",
      "multiclock on",
      "",
      "[engines]",
      "smtbmc --progress z3",
      "",
      "[script]",
      "read_verilog <<END",
      "module \\\\\\$dff (CLK, D, Q);",
      "  parameter WIDTH = 0;",
      "  parameter CLK_POLARITY = 1'b1;",
      "  input CLK;",
      "  input [WIDTH-1:0] D;",
      "  output reg [WIDTH-1:0] Q;",
      "  \\\\\\$ff #(.WIDTH(WIDTH)) _TECHMAP_REPLACE_ (.D(D),.Q(Q));",
      "endmodule",
      "END",
      "design -stash dff2ff",
      "read_ilang $1.il",
      "proc",
      "techmap -map %dff2ff top/w:clk %co",
      "prep -top top",
      "",
      "[files]",
      "out/$1.il",
      "$0",
    ],
    "description": "Generates a stub .sby file"
  },
  "Delay method call": {
    "scope": "python",
    "prefix": "delay",
    "body": [
      "yield Delay($1)",
      "$0",
    ],
    "description": "Generates a `Delay` method call"
  }
}
